// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync-coordinator/accountlimit (interfaces: AccountLimit)
//
// Generated by this command:
//
//	mockgen -destination mock_accountlimit/mock_accountlimit.go github.com/anyproto/any-sync-coordinator/accountlimit AccountLimit
//

// Package mock_accountlimit is a generated GoMock package.
package mock_accountlimit

import (
	context "context"
	reflect "reflect"

	accountlimit "github.com/anyproto/any-sync-coordinator/accountlimit"
	app "github.com/anyproto/any-sync/app"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountLimit is a mock of AccountLimit interface.
type MockAccountLimit struct {
	ctrl     *gomock.Controller
	recorder *MockAccountLimitMockRecorder
}

// MockAccountLimitMockRecorder is the mock recorder for MockAccountLimit.
type MockAccountLimitMockRecorder struct {
	mock *MockAccountLimit
}

// NewMockAccountLimit creates a new mock instance.
func NewMockAccountLimit(ctrl *gomock.Controller) *MockAccountLimit {
	mock := &MockAccountLimit{ctrl: ctrl}
	mock.recorder = &MockAccountLimitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountLimit) EXPECT() *MockAccountLimitMockRecorder {
	return m.recorder
}

// GetLimits mocks base method.
func (m *MockAccountLimit) GetLimits(arg0 context.Context, arg1 string) (accountlimit.Limits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimits", arg0, arg1)
	ret0, _ := ret[0].(accountlimit.Limits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimits indicates an expected call of GetLimits.
func (mr *MockAccountLimitMockRecorder) GetLimits(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimits", reflect.TypeOf((*MockAccountLimit)(nil).GetLimits), arg0, arg1)
}

// GetLimitsBySpace mocks base method.
func (m *MockAccountLimit) GetLimitsBySpace(arg0 context.Context, arg1 string) (accountlimit.SpaceLimits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimitsBySpace", arg0, arg1)
	ret0, _ := ret[0].(accountlimit.SpaceLimits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimitsBySpace indicates an expected call of GetLimitsBySpace.
func (mr *MockAccountLimitMockRecorder) GetLimitsBySpace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimitsBySpace", reflect.TypeOf((*MockAccountLimit)(nil).GetLimitsBySpace), arg0, arg1)
}

// Init mocks base method.
func (m *MockAccountLimit) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockAccountLimitMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAccountLimit)(nil).Init), arg0)
}

// Name mocks base method.
func (m *MockAccountLimit) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAccountLimitMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAccountLimit)(nil).Name))
}

// SetLimits mocks base method.
func (m *MockAccountLimit) SetLimits(arg0 context.Context, arg1 accountlimit.Limits) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLimits", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLimits indicates an expected call of SetLimits.
func (mr *MockAccountLimitMockRecorder) SetLimits(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLimits", reflect.TypeOf((*MockAccountLimit)(nil).SetLimits), arg0, arg1)
}
