// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync-coordinator/deletionlog (interfaces: DeletionLog)
//
// Generated by this command:
//
//	mockgen -destination mock_deletionlog/mock_deletionlog.go github.com/anyproto/any-sync-coordinator/deletionlog DeletionLog
//

// Package mock_deletionlog is a generated GoMock package.
package mock_deletionlog

import (
	context "context"
	reflect "reflect"

	deletionlog "github.com/anyproto/any-sync-coordinator/deletionlog"
	app "github.com/anyproto/any-sync/app"
	gomock "go.uber.org/mock/gomock"
)

// MockDeletionLog is a mock of DeletionLog interface.
type MockDeletionLog struct {
	ctrl     *gomock.Controller
	recorder *MockDeletionLogMockRecorder
}

// MockDeletionLogMockRecorder is the mock recorder for MockDeletionLog.
type MockDeletionLogMockRecorder struct {
	mock *MockDeletionLog
}

// NewMockDeletionLog creates a new mock instance.
func NewMockDeletionLog(ctrl *gomock.Controller) *MockDeletionLog {
	mock := &MockDeletionLog{ctrl: ctrl}
	mock.recorder = &MockDeletionLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeletionLog) EXPECT() *MockDeletionLogMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDeletionLog) Add(arg0 context.Context, arg1, arg2 string, arg3 deletionlog.Status) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockDeletionLogMockRecorder) Add(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDeletionLog)(nil).Add), arg0, arg1, arg2, arg3)
}

// Close mocks base method.
func (m *MockDeletionLog) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDeletionLogMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDeletionLog)(nil).Close), arg0)
}

// GetAfter mocks base method.
func (m *MockDeletionLog) GetAfter(arg0 context.Context, arg1 string, arg2 uint32) ([]deletionlog.Record, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAfter", arg0, arg1, arg2)
	ret0, _ := ret[0].([]deletionlog.Record)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAfter indicates an expected call of GetAfter.
func (mr *MockDeletionLogMockRecorder) GetAfter(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAfter", reflect.TypeOf((*MockDeletionLog)(nil).GetAfter), arg0, arg1, arg2)
}

// Init mocks base method.
func (m *MockDeletionLog) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockDeletionLogMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDeletionLog)(nil).Init), arg0)
}

// Name mocks base method.
func (m *MockDeletionLog) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDeletionLogMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDeletionLog)(nil).Name))
}

// Run mocks base method.
func (m *MockDeletionLog) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockDeletionLogMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockDeletionLog)(nil).Run), arg0)
}
