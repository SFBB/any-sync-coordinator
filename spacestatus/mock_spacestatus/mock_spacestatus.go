// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync-coordinator/spacestatus (interfaces: SpaceStatus)
//
// Generated by this command:
//
//	mockgen -destination mock_spacestatus/mock_spacestatus.go github.com/anyproto/any-sync-coordinator/spacestatus SpaceStatus
//

// Package mock_spacestatus is a generated GoMock package.
package mock_spacestatus

import (
	context "context"
	reflect "reflect"

	spacestatus "github.com/anyproto/any-sync-coordinator/spacestatus"
	app "github.com/anyproto/any-sync/app"
	crypto "github.com/anyproto/any-sync/util/crypto"
	gomock "go.uber.org/mock/gomock"
)

// MockSpaceStatus is a mock of SpaceStatus interface.
type MockSpaceStatus struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceStatusMockRecorder
	isgomock struct{}
}

// MockSpaceStatusMockRecorder is the mock recorder for MockSpaceStatus.
type MockSpaceStatusMockRecorder struct {
	mock *MockSpaceStatus
}

// NewMockSpaceStatus creates a new mock instance.
func NewMockSpaceStatus(ctrl *gomock.Controller) *MockSpaceStatus {
	mock := &MockSpaceStatus{ctrl: ctrl}
	mock.recorder = &MockSpaceStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceStatus) EXPECT() *MockSpaceStatusMockRecorder {
	return m.recorder
}

// AccountDelete mocks base method.
func (m *MockSpaceStatus) AccountDelete(ctx context.Context, payload spacestatus.AccountDeletion) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountDelete", ctx, payload)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountDelete indicates an expected call of AccountDelete.
func (mr *MockSpaceStatusMockRecorder) AccountDelete(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountDelete", reflect.TypeOf((*MockSpaceStatus)(nil).AccountDelete), ctx, payload)
}

// AccountRevertDeletion mocks base method.
func (m *MockSpaceStatus) AccountRevertDeletion(ctx context.Context, payload spacestatus.AccountInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountRevertDeletion", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountRevertDeletion indicates an expected call of AccountRevertDeletion.
func (mr *MockSpaceStatusMockRecorder) AccountRevertDeletion(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountRevertDeletion", reflect.TypeOf((*MockSpaceStatus)(nil).AccountRevertDeletion), ctx, payload)
}

// ChangeOwner mocks base method.
func (m *MockSpaceStatus) ChangeOwner(ctx context.Context, spaceId, newOwnerId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOwner", ctx, spaceId, newOwnerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeOwner indicates an expected call of ChangeOwner.
func (mr *MockSpaceStatusMockRecorder) ChangeOwner(ctx, spaceId, newOwnerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOwner", reflect.TypeOf((*MockSpaceStatus)(nil).ChangeOwner), ctx, spaceId, newOwnerId)
}

// ChangeStatus mocks base method.
func (m *MockSpaceStatus) ChangeStatus(ctx context.Context, change spacestatus.StatusChange) (spacestatus.StatusEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatus", ctx, change)
	ret0, _ := ret[0].(spacestatus.StatusEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeStatus indicates an expected call of ChangeStatus.
func (mr *MockSpaceStatusMockRecorder) ChangeStatus(ctx, change any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockSpaceStatus)(nil).ChangeStatus), ctx, change)
}

// Close mocks base method.
func (m *MockSpaceStatus) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSpaceStatusMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSpaceStatus)(nil).Close), ctx)
}

// Init mocks base method.
func (m *MockSpaceStatus) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockSpaceStatusMockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockSpaceStatus)(nil).Init), a)
}

// MakeShareable mocks base method.
func (m *MockSpaceStatus) MakeShareable(ctx context.Context, spaceId string, spaceType spacestatus.SpaceType, limit uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeShareable", ctx, spaceId, spaceType, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeShareable indicates an expected call of MakeShareable.
func (mr *MockSpaceStatusMockRecorder) MakeShareable(ctx, spaceId, spaceType, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeShareable", reflect.TypeOf((*MockSpaceStatus)(nil).MakeShareable), ctx, spaceId, spaceType, limit)
}

// MakeUnshareable mocks base method.
func (m *MockSpaceStatus) MakeUnshareable(ctx context.Context, spaceId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeUnshareable", ctx, spaceId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeUnshareable indicates an expected call of MakeUnshareable.
func (mr *MockSpaceStatusMockRecorder) MakeUnshareable(ctx, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeUnshareable", reflect.TypeOf((*MockSpaceStatus)(nil).MakeUnshareable), ctx, spaceId)
}

// Name mocks base method.
func (m *MockSpaceStatus) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSpaceStatusMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSpaceStatus)(nil).Name))
}

// NewStatus mocks base method.
func (m *MockSpaceStatus) NewStatus(ctx context.Context, spaceId string, identity, oldIdentity crypto.PubKey, spaceType spacestatus.SpaceType, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStatus", ctx, spaceId, identity, oldIdentity, spaceType, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewStatus indicates an expected call of NewStatus.
func (mr *MockSpaceStatusMockRecorder) NewStatus(ctx, spaceId, identity, oldIdentity, spaceType, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStatus", reflect.TypeOf((*MockSpaceStatus)(nil).NewStatus), ctx, spaceId, identity, oldIdentity, spaceType, force)
}

// Run mocks base method.
func (m *MockSpaceStatus) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockSpaceStatusMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSpaceStatus)(nil).Run), ctx)
}

// SpaceDelete mocks base method.
func (m *MockSpaceStatus) SpaceDelete(ctx context.Context, payload spacestatus.SpaceDeletion) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceDelete", ctx, payload)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceDelete indicates an expected call of SpaceDelete.
func (mr *MockSpaceStatusMockRecorder) SpaceDelete(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceDelete", reflect.TypeOf((*MockSpaceStatus)(nil).SpaceDelete), ctx, payload)
}

// Status mocks base method.
func (m *MockSpaceStatus) Status(ctx context.Context, spaceId string) (spacestatus.StatusEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx, spaceId)
	ret0, _ := ret[0].(spacestatus.StatusEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockSpaceStatusMockRecorder) Status(ctx, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockSpaceStatus)(nil).Status), ctx, spaceId)
}
