// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync-coordinator/coordinatorlog (interfaces: CoordinatorLog)
//
// Generated by this command:
//
//	mockgen -destination mock_coordinatorlog/mock_coordinatorlog.go github.com/anyproto/any-sync-coordinator/coordinatorlog CoordinatorLog
//

// Package mock_coordinatorlog is a generated GoMock package.
package mock_coordinatorlog

import (
	context "context"
	reflect "reflect"

	coordinatorlog "github.com/anyproto/any-sync-coordinator/coordinatorlog"
	app "github.com/anyproto/any-sync/app"
	gomock "go.uber.org/mock/gomock"
)

// MockCoordinatorLog is a mock of CoordinatorLog interface.
type MockCoordinatorLog struct {
	ctrl     *gomock.Controller
	recorder *MockCoordinatorLogMockRecorder
	isgomock struct{}
}

// MockCoordinatorLogMockRecorder is the mock recorder for MockCoordinatorLog.
type MockCoordinatorLogMockRecorder struct {
	mock *MockCoordinatorLog
}

// NewMockCoordinatorLog creates a new mock instance.
func NewMockCoordinatorLog(ctrl *gomock.Controller) *MockCoordinatorLog {
	mock := &MockCoordinatorLog{ctrl: ctrl}
	mock.recorder = &MockCoordinatorLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordinatorLog) EXPECT() *MockCoordinatorLogMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockCoordinatorLog) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockCoordinatorLogMockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockCoordinatorLog)(nil).Init), a)
}

// Name mocks base method.
func (m *MockCoordinatorLog) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCoordinatorLogMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCoordinatorLog)(nil).Name))
}

// SpaceReceipt mocks base method.
func (m *MockCoordinatorLog) SpaceReceipt(ctx context.Context, entry coordinatorlog.SpaceReceiptEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceReceipt", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// SpaceReceipt indicates an expected call of SpaceReceipt.
func (mr *MockCoordinatorLogMockRecorder) SpaceReceipt(ctx, entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceReceipt", reflect.TypeOf((*MockCoordinatorLog)(nil).SpaceReceipt), ctx, entry)
}
