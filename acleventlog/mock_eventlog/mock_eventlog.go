// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync-coordinator/acleventlog (interfaces: AclEventLog)
//
// Generated by this command:
//
//	mockgen -destination mock_eventlog/mock_eventlog.go github.com/anyproto/any-sync-coordinator/acleventlog AclEventLog
//

// Package mock_acleventlog is a generated GoMock package.
package mock_acleventlog

import (
	context "context"
	reflect "reflect"

	acleventlog "github.com/anyproto/any-sync-coordinator/acleventlog"
	app "github.com/anyproto/any-sync/app"
	gomock "go.uber.org/mock/gomock"
)

// MockAclEventLog is a mock of AclEventLog interface.
type MockAclEventLog struct {
	ctrl     *gomock.Controller
	recorder *MockAclEventLogMockRecorder
}

// MockAclEventLogMockRecorder is the mock recorder for MockAclEventLog.
type MockAclEventLogMockRecorder struct {
	mock *MockAclEventLog
}

// NewMockAclEventLog creates a new mock instance.
func NewMockAclEventLog(ctrl *gomock.Controller) *MockAclEventLog {
	mock := &MockAclEventLog{ctrl: ctrl}
	mock.recorder = &MockAclEventLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAclEventLog) EXPECT() *MockAclEventLogMockRecorder {
	return m.recorder
}

// AddLog mocks base method.
func (m *MockAclEventLog) AddLog(arg0 context.Context, arg1 acleventlog.AclEventLogEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLog indicates an expected call of AddLog.
func (mr *MockAclEventLogMockRecorder) AddLog(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLog", reflect.TypeOf((*MockAclEventLog)(nil).AddLog), arg0, arg1)
}

// Close mocks base method.
func (m *MockAclEventLog) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAclEventLogMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAclEventLog)(nil).Close), arg0)
}

// GetAfter mocks base method.
func (m *MockAclEventLog) GetAfter(arg0 context.Context, arg1, arg2 string, arg3 uint32) ([]acleventlog.AclEventLogEntry, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAfter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]acleventlog.AclEventLogEntry)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAfter indicates an expected call of GetAfter.
func (mr *MockAclEventLogMockRecorder) GetAfter(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAfter", reflect.TypeOf((*MockAclEventLog)(nil).GetAfter), arg0, arg1, arg2, arg3)
}

// Init mocks base method.
func (m *MockAclEventLog) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockAclEventLogMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAclEventLog)(nil).Init), arg0)
}

// Name mocks base method.
func (m *MockAclEventLog) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAclEventLogMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAclEventLog)(nil).Name))
}

// Run mocks base method.
func (m *MockAclEventLog) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockAclEventLogMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockAclEventLog)(nil).Run), arg0)
}
