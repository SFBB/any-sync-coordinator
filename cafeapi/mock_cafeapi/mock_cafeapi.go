// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync-coordinator/cafeapi (interfaces: CafeApi)

// Package mock_cafeapi is a generated GoMock package.
package mock_cafeapi

import (
	context "context"
	reflect "reflect"

	cafeapi "github.com/anyproto/any-sync-coordinator/cafeapi"
	app "github.com/anyproto/any-sync/app"
	gomock "go.uber.org/mock/gomock"
)

// MockCafeApi is a mock of CafeApi interface.
type MockCafeApi struct {
	ctrl     *gomock.Controller
	recorder *MockCafeApiMockRecorder
}

// MockCafeApiMockRecorder is the mock recorder for MockCafeApi.
type MockCafeApiMockRecorder struct {
	mock *MockCafeApi
}

// NewMockCafeApi creates a new mock instance.
func NewMockCafeApi(ctrl *gomock.Controller) *MockCafeApi {
	mock := &MockCafeApi{ctrl: ctrl}
	mock.recorder = &MockCafeApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCafeApi) EXPECT() *MockCafeApiMockRecorder {
	return m.recorder
}

// CheckCafeUserStatus mocks base method.
func (m *MockCafeApi) CheckCafeUserStatus(arg0 context.Context, arg1 string) (cafeapi.UserType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCafeUserStatus", arg0, arg1)
	ret0, _ := ret[0].(cafeapi.UserType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCafeUserStatus indicates an expected call of CheckCafeUserStatus.
func (mr *MockCafeApiMockRecorder) CheckCafeUserStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCafeUserStatus", reflect.TypeOf((*MockCafeApi)(nil).CheckCafeUserStatus), arg0, arg1)
}

// Init mocks base method.
func (m *MockCafeApi) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockCafeApiMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockCafeApi)(nil).Init), arg0)
}

// Name mocks base method.
func (m *MockCafeApi) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCafeApiMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCafeApi)(nil).Name))
}
